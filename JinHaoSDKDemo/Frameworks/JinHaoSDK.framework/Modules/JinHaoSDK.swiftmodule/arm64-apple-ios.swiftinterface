// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name JinHaoSDK
import CoreBluetooth
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct PL3BandEQ {
  public var dc: Swift.UInt8
  public var eq500: Swift.UInt8
  public var eq1000: Swift.UInt8
  public var eq1500: Swift.UInt8
  public var eq2000: Swift.UInt8
  public var eq2500: Swift.UInt8
  public var eq3000: Swift.UInt8
  public var eq3500: Swift.UInt8
  public var eq4000: Swift.UInt8
  public var eq4500: Swift.UInt8
  public var eq5000: Swift.UInt8
  public var eq5500: Swift.UInt8
  public var eq6000: Swift.UInt8
  public var eq6500: Swift.UInt8
  public var eq7000: Swift.UInt8
  public var eq7500: Swift.UInt8
}
public enum JinHaoProfileType : Swift.UInt8 {
  case productSeries
  case productPattern
  case productHard
  case productSoft
  case productSku
  case productReserved
  case productSeriesCode
  case bluetoothHardPattern
  case bluetoothHard
  case bluetoothSoft
  case advertisementName
  case firmware
  case ota
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct JinHaoProfileReservedField : Swift.Codable {
  public init(data: Foundation.Data)
  public mutating func setData(data: Foundation.Data)
  public func toData() -> Foundation.Data
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct JinHaoProfile : Swift.Codable {
  public var pSeriesCode: Swift.String
  public var skuCode: Swift.String
  public var patternCode: Swift.String
  public var hwVersion: Swift.String
  public var swVersion: Swift.String
  public var bhwPattern: Swift.String
  public var bhwVersion: Swift.String
  public var bswVersion: Swift.String
  public var version: Swift.String
  public var otaVersion: Swift.String
  public var seriesCode: Swift.String
  public var adName: Swift.String
  public var reservedField: JinHaoSDK.JinHaoProfileReservedField?
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct JinHaoRawData {
}
public struct PL3CompTime {
  public var ch1: Swift.UInt8
  public var ch2: Swift.UInt8
  public var ch3: Swift.UInt8
  public var ch4: Swift.UInt8
  public var ch5: Swift.UInt8
  public var ch6: Swift.UInt8
  public var ch7: Swift.UInt8
  public var ch8: Swift.UInt8
  public var ch9: Swift.UInt8
  public var ch10: Swift.UInt8
  public var ch11: Swift.UInt8
  public var ch12: Swift.UInt8
  public var ch13: Swift.UInt8
  public var ch14: Swift.UInt8
  public var ch15: Swift.UInt8
  public var ch16: Swift.UInt8
  public func description(value: Swift.UInt8) -> Swift.String
}
public struct PL3CompRatio {
  public var ch1: Swift.UInt8
  public var ch2: Swift.UInt8
  public var ch3: Swift.UInt8
  public var ch4: Swift.UInt8
  public var ch5: Swift.UInt8
  public var ch6: Swift.UInt8
  public var ch7: Swift.UInt8
  public var ch8: Swift.UInt8
  public var ch9: Swift.UInt8
  public var ch10: Swift.UInt8
  public var ch11: Swift.UInt8
  public var ch12: Swift.UInt8
  public var ch13: Swift.UInt8
  public var ch14: Swift.UInt8
  public var ch15: Swift.UInt8
  public var ch16: Swift.UInt8
  public init(data: Foundation.Data)
  public func toData() -> Foundation.Data
  public func description(value: Swift.UInt8) -> Swift.String
}
public enum JinHaoChip : Swift.UInt8, Swift.Codable {
  case h01
  case a4
  case a16
  case unassigned
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum JinHaoBLEChip : Swift.UInt8, Swift.Codable {
  case u87
  case tiny600
  case unassigned
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum JinHaoDirection {
  case normal
  case tv
  case meeting
  case face
  case unknown
  public static func == (a: JinHaoSDK.JinHaoDirection, b: JinHaoSDK.JinHaoDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum JinHaoNoise {
  case off
  case weak
  case medium
  case strong
  public static func == (a: JinHaoSDK.JinHaoNoise, b: JinHaoSDK.JinHaoNoise) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum JinHaoMPO {
  case off
  case low
  case medium
  case high
  public static func == (a: JinHaoSDK.JinHaoMPO, b: JinHaoSDK.JinHaoMPO) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol JinHaoDsp : Swift.Equatable {
  var direction: JinHaoSDK.JinHaoDirection { get set }
  var noise: JinHaoSDK.JinHaoNoise { get set }
  var mpo: JinHaoSDK.JinHaoMPO? { get set }
  var eq250: Swift.Int { get set }
  var eq500: Swift.Int { get set }
  var eq1000: Swift.Int { get set }
  var eq1500: Swift.Int { get set }
  var eq2000: Swift.Int { get set }
  var eq2500: Swift.Int { get set }
  var eq3000: Swift.Int { get set }
  var eq3500: Swift.Int { get set }
  var eq4000: Swift.Int { get set }
  var eq5000: Swift.Int { get set }
  var eq6000: Swift.Int { get set }
  var eq7000: Swift.Int { get set }
  init(data: Foundation.Data)
  func toData() -> Foundation.Data
}
public enum JinHaoRequest {
  case readProgramVolume
  case readVolume(program: Swift.Int)
  case readDsp(program: Swift.Int)
  case readGlobalDsp(chip: JinHaoSDK.JinHaoChip)
  case readProfile(type: JinHaoSDK.JinHaoProfileType)
  case writeDsp(dsp: any JinHaoSDK.JinHaoDsp, program: Swift.Int, withResponse: Swift.Bool)
  case writeDspData(data: Foundation.Data, program: Swift.Int, withResponse: Swift.Bool)
  case writeGlobalDsp(global: any JinHaoSDK.JinHaoGlobalDsp, chip: JinHaoSDK.JinHaoChip, withResponse: Swift.Bool)
  case writeGlobalDspData(data: Foundation.Data, chip: JinHaoSDK.JinHaoChip, withResponse: Swift.Bool)
  case writeProfile(data: Foundation.Data, type: JinHaoSDK.JinHaoProfileType)
  case writeProtocolData(data: JinHaoSDK.JinHaoRawData)
  case controlVolume(volume: Swift.Int, program: Swift.Int)
  case controlProgram(program: Swift.Int)
  case controlLockChip
  case controlMute(mute: Swift.Bool)
  case controlBeep(value: Swift.Int)
  case controlShip
  case enterDUT
  case setTransparency(level: Swift.Int)
  case setBrEdr(enable: Swift.Bool)
  case getTransparencyLevel
  case beginFind
  case endFind
  case resetFactory
  case hearingSupported
  case enterHearingMode(enter: Swift.Bool)
  case setBaseAmplitude(freq: Swift.UInt16, amp: Swift.Int16)
  case playSine(freq: Swift.UInt16, dB: Swift.UInt8, timestamp: Swift.Int32)
  case playSineAmplitude(freq: Swift.UInt16, amp: Swift.Int16, timestamp: Swift.Int32)
  case stopPlaySine
}
public protocol JinHaoAccessoryDelegate : JinHaoSDK.AccessoryDelegate {
  func batteryDidChanged(_ accessory: JinHaoSDK.JinHaoAccessory, bat: Swift.Int)
  func didNotifyProgram(_ accessory: JinHaoSDK.JinHaoAccessory, previous: Swift.Int, current: Swift.Int)
  func didNotifyVolume(_ accessory: JinHaoSDK.JinHaoAccessory, previous: Swift.Int, current: Swift.Int)
  func didUpdateValue(_ accessory: JinHaoSDK.JinHaoAccessory, request: JinHaoSDK.JinHaoRequest)
}
@objc @_inheritsConvenienceInitializers public class JinHaoAccessory : JinHaoSDK.Accessory {
  public var address: Swift.String
  public var orientation: JinHaoSDK.AccessoryOrientation
  public var hearChip: JinHaoSDK.JinHaoChip
  public var bleChip: JinHaoSDK.JinHaoBLEChip
  public var bat: Swift.Int?
  public var program: Swift.Int?
  public var volume: Swift.Int? {
    get
  }
  public var volumeDic: [Swift.Int : Swift.Int]
  public var dspDic: [Swift.Int : any JinHaoSDK.JinHaoDsp]
  public var dsp: (any JinHaoSDK.JinHaoDsp)? {
    get
  }
  public var global: (any JinHaoSDK.JinHaoGlobalDsp)?
  public var profile: JinHaoSDK.JinHaoProfile
  public var brEdr: Swift.Bool
  public var transEnable: Swift.Bool
  public var transLevel: Swift.Int?
  public var hearingSupported: Swift.Bool
  override public var localName: Swift.String? {
    get
    set
  }
  public init(peripheral: CoreBluetooth.CBPeripheral, mfgData: Foundation.Data, manager: JinHaoSDK.AccessoryManager)
  public func request(request: JinHaoSDK.JinHaoRequest, complete: ((JinHaoSDK.JinHaoResult) -> Swift.Void)?)
  public func request(requests: [JinHaoSDK.JinHaoRequest], complete: (() -> Swift.Void)?)
  public func readBattery()
  @objc deinit
}
public struct PL3InputSettings {
  public var inputMux: Swift.UInt8
  public var preampGainCh1: Swift.UInt8
  public var preampGainCh2: Swift.UInt8
  public var preampGainDigitalCh1: Swift.UInt8
  public var preampGainDigitalCh2: Swift.UInt8
  public var matrixGain: Swift.UInt8
  public var matrixGainMantissa: Swift.UInt8
  public var matrixGainExponent: Swift.UInt8
  public var feedbackCanceller: Swift.UInt8
  public var noiseReduction: Swift.UInt8
  public var lowLevelExpansion: Swift.UInt8
  public var windSuppression: Swift.UInt8
  public var lowCutFilter: Swift.UInt8
  public var remoteMixRatio: Swift.UInt8
  public var mpoAttack: Swift.UInt8
  public var mpoRelease: Swift.UInt8
}
public enum PL3Error : Swift.Error {
  case timeout
  case unknown
  public static func == (a: JinHaoSDK.PL3Error, b: JinHaoSDK.PL3Error) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PL3Request {
  public let command: JinHaoSDK.PL3Command
  public let data: Foundation.Data?
  public let read: Swift.Bool
}
public struct PL3Response {
  public let command: JinHaoSDK.PL3Command
  public let data: Foundation.Data
}
public protocol JinHaoGlobalDsp {
  init(data: Foundation.Data)
  func toData() -> Foundation.Data
}
public enum JinHaoResultError : Swift.Error {
  case timeout
  case writeError
  case readError
  case controlError
  case btError
  case unknown
  case disconnected
  public static func == (a: JinHaoSDK.JinHaoResultError, b: JinHaoSDK.JinHaoResultError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum JinHaoResponse {
  case didReadProgram(program: Swift.Int, volume: Swift.Int?)
  case didReadDsp(program: Swift.Int, data: Foundation.Data)
  case didReadGlobal(data: Foundation.Data)
  case didReadProfile(data: Foundation.Data, type: JinHaoSDK.JinHaoProfileType)
  case didReadTransparency(level: Swift.Int)
  case didReadHearingTest(supported: Swift.Bool)
  case didReadPairCode(code: Foundation.Data)
  case didNotify(program: Swift.Int, volume: Swift.Int)
  case didRequest
  case unknown(data: JinHaoSDK.JinHaoRawData)
}
public enum JinHaoResult {
  case success(data: JinHaoSDK.JinHaoResponse)
  case error(error: JinHaoSDK.JinHaoResultError)
}
public protocol PL3AccessoryDelegate : AnyObject {
  func didNotify(_ accessory: JinHaoSDK.PL3Accessory, data: JinHaoSDK.PL3Response)
  func didUpdateValue(_ accessory: JinHaoSDK.PL3Accessory, request: JinHaoSDK.PL3Request)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PL3Accessory : JinHaoSDK.Accessory {
  public var manufacturerId: Swift.Int
  public var modelName: Swift.String
  public var orientation: JinHaoSDK.AccessoryOrientation {
    get
  }
  public var bandEQ: [Swift.Int : JinHaoSDK.PL3BandEQ] {
    get
  }
  public var compRatio: [Swift.Int : JinHaoSDK.PL3CompRatio] {
    get
  }
  public var compTime: [Swift.Int : JinHaoSDK.PL3CompTime] {
    get
  }
  public var compThreshold: [Swift.Int : JinHaoSDK.PL3CompThreshold] {
    get
  }
  public var mpoConfig: [Swift.Int : JinHaoSDK.PL3MpoConfig] {
    get
  }
  public var inputSetting: [Swift.Int : JinHaoSDK.PL3InputSettings] {
    get
  }
  public var volume: Swift.Int {
    get
  }
  public var battery: Swift.Int {
    get
  }
  public var program: Swift.Int {
    get
  }
  weak public var dataDelegate: (any JinHaoSDK.PL3AccessoryDelegate)?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class CHDLC : ObjectiveC.NSObject {
  @objc public var sentPayloadLengthHigh: Swift.UInt8 {
    @objc get
  }
  @objc public var sentPayloadLengthLow: Swift.UInt8 {
    @objc get
  }
  @objc public var rcvdPayloadLengthHigh: Swift.UInt8 {
    @objc get
  }
  @objc public var rcvdPayloadLengthLow: Swift.UInt8 {
    @objc get
  }
  @objc override dynamic public init()
  @objc public func sentCommand() -> Swift.UInt8
  @objc public func rcvdCommand() -> Swift.UInt8
  @objc public func sentPayload() -> Foundation.Data
  @objc public func rcvdPayload() -> Foundation.Data
  @objc public func getHDLC() -> Foundation.Data
  @objc public func moreData() -> Swift.Bool
  @objc public func getHDLCAll() -> Foundation.Data
  @objc public func getSentDataString() -> Swift.String
  @objc public func getRcvdDataString() -> Swift.String
  @objc open func create(_ cmdStr: Swift.String, _ dataStr: Swift.String) -> Swift.Bool
  @objc public func create(_ cmd: Swift.UInt8, data: Foundation.Data?, read: Swift.Bool = false)
  @objc public func parse(_ packet: Foundation.Data)
  @objc deinit
}
public protocol JinHaoDisposable {
  func dispose()
}
@_hasMissingDesignatedInitializers public class AccessoryService {
  @objc deinit
}
public enum AccessoryState : Swift.Int {
  case disconnected, disconnecting, connecting, connected
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol AccessoryDelegate : AnyObject {
  func device(_ device: JinHaoSDK.Accessory, didUpdate state: JinHaoSDK.AccessoryState)
  func device(_ device: JinHaoSDK.Accessory, didDiscoverServices: [JinHaoSDK.AccessoryService])
  func device(_ device: JinHaoSDK.Accessory, didConnect error: (any Swift.Error)?)
  func device(_ device: JinHaoSDK.Accessory, didDisconnect error: (any Swift.Error)?)
  func device(_ device: JinHaoSDK.Accessory, didFailToConnect error: (any Swift.Error)?)
}
@objc @_hasMissingDesignatedInitializers public class Accessory : ObjectiveC.NSObject, CoreBluetooth.CBPeripheralDelegate {
  public var peripheral: CoreBluetooth.CBPeripheral {
    get
  }
  weak public var alphaDelegate: (any CoreBluetooth.CBPeripheralDelegate)?
  public var name: Swift.String {
    get
  }
  public var localName: Swift.String?
  public var deviceId: Swift.String {
    get
  }
  public var mfgData: Foundation.Data
  public var state: JinHaoSDK.AccessoryState {
    get
  }
  public func setDelegate(delegate: (any JinHaoSDK.AccessoryDelegate)?)
  @objc deinit
}
extension JinHaoSDK.Accessory {
  public func connect(with delegate: any JinHaoSDK.AccessoryDelegate, duration: Foundation.TimeInterval, tag: Swift.String?)
  public func connect(with delegate: any JinHaoSDK.AccessoryDelegate, tag: Swift.String?) -> Swift.Bool
  public func disconnect() -> Swift.Bool
  @objc dynamic public func updateValueForNumberOfPrograms(_ numberOfPrograms: Swift.Int)
}
extension JinHaoSDK.Accessory {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
}
extension Swift.String {
  public func ask_hexadecimal() -> Foundation.Data?
}
@_hasMissingDesignatedInitializers public class JinHaoValueObservable<ValueType> {
  public typealias Action = (ValueType) -> Swift.Void
  public var value: ValueType {
    get
    set
  }
  public func setValue(_ value: ValueType, notify: Swift.Bool)
  public func observe(_ action: @escaping JinHaoSDK.JinHaoValueObservable<ValueType>.Action) -> any JinHaoSDK.JinHaoDisposable
  public func observeOnce(_ action: @escaping JinHaoSDK.JinHaoValueObservable<ValueType>.Action)
  public func notifyAll()
  @objc deinit
}
public protocol AccessoryManagerStatusDelegate : ObjectiveC.NSObjectProtocol {
  func accessoryManager(_ manager: JinHaoSDK.AccessoryManager?, isAvailable: Swift.Bool)
}
public protocol AccessoryManagerScanningDelegate : ObjectiveC.NSObjectProtocol {
  func accessoryManager(_ manager: JinHaoSDK.AccessoryManager?, isScanning: Swift.Bool)
  func accessoryManager(_ manager: JinHaoSDK.AccessoryManager?, didDiscover device: JinHaoSDK.Accessory?, rssi: Foundation.NSNumber?)
  func accessoryManager(_ manager: JinHaoSDK.AccessoryManager?, didUpdate device: JinHaoSDK.Accessory?, rssi: Foundation.NSNumber?)
}
@objc @_inheritsConvenienceInitializers public class AccessoryManager : ObjectiveC.NSObject {
  public var hasDiscoveredAccessories: Swift.Bool {
    get
  }
  public var accessories: [JinHaoSDK.Accessory] {
    get
  }
  public var selectedAccessory: JinHaoSDK.Accessory? {
    get
  }
  public var isScanning: Swift.Bool {
    get
  }
  public var isAvailable: Swift.Bool {
    get
  }
  weak public var statusDelegate: (any JinHaoSDK.AccessoryManagerStatusDelegate)?
  weak public var scanningDelegate: (any JinHaoSDK.AccessoryManagerScanningDelegate)?
  public var accessorySelectorDelegate: any JinHaoSDK.AccessorySelectorDelegate
  @objc override dynamic public init()
  public func setSelectedAccessory(_ deviceId: Swift.String)
  public func blueState() -> CoreBluetooth.CBManagerState
  public func openBluetooth()
  public func startScan()
  public func startScan(duration: Foundation.TimeInterval)
  public func stopScan()
  public func clearAccessories()
  @objc deinit
}
extension JinHaoSDK.AccessoryManager : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
}
@objc @_inheritsConvenienceInitializers public class JinHaoLog : ObjectiveC.NSObject {
  public static var enable: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public struct Queue<T> {
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public mutating func enqueue(_ element: T)
  public mutating func dequeue() -> T?
  public var front: T? {
    get
  }
}
@objc public protocol AccessorySelectorDelegate {
  @objc func select(peripheral: CoreBluetooth.CBPeripheral, mfgData: Foundation.Data, manager: JinHaoSDK.AccessoryManager) -> JinHaoSDK.Accessory?
}
public enum AccessoryOrientation : Swift.UInt8, Swift.Codable {
  case left
  case right
  case unassigned
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct PL3MpoConfig {
  public var ch1: Swift.UInt8
  public var ch2: Swift.UInt8
  public var ch3: Swift.UInt8
  public var ch4: Swift.UInt8
  public var ch5: Swift.UInt8
  public var ch6: Swift.UInt8
  public var ch7: Swift.UInt8
  public var ch8: Swift.UInt8
  public var ch9: Swift.UInt8
  public var ch10: Swift.UInt8
  public var ch11: Swift.UInt8
  public var ch12: Swift.UInt8
  public var ch13: Swift.UInt8
  public var ch14: Swift.UInt8
  public var ch15: Swift.UInt8
  public var ch16: Swift.UInt8
  public func description(value: Swift.UInt8) -> Swift.String
}
public enum PL3Command : Swift.UInt8 {
  case volumeLevel, program, deviceSettings, batteryLevel, orientation, burnLiveSettings, bandEQs, compRatios, compTimes, compThreshold, mpoConfig, inputSettings, rpsCommands, updateAdvertising, streamingStatus, muteUnmute, clearPASList, clearBLEBondList, modelNumber, manufacturer, unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum PL3DeviceSettings : Swift.UInt8 {
  case numberOfPrograms, numberOfVCSteps, VCStepSize, VCEnabled, MDA8LowerByte, MDA8UpperByte, MDA9LowerByte, MDA9UpperByte, algorithmVersionBuild, algorithmVersionMinor, algorithmVersionMajor, unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct PL3CompThreshold {
  public var ch1: Swift.UInt8
  public var ch2: Swift.UInt8
  public var ch3: Swift.UInt8
  public var ch4: Swift.UInt8
  public var ch5: Swift.UInt8
  public var ch6: Swift.UInt8
  public var ch7: Swift.UInt8
  public var ch8: Swift.UInt8
  public var ch9: Swift.UInt8
  public var ch10: Swift.UInt8
  public var ch11: Swift.UInt8
  public var ch12: Swift.UInt8
  public var ch13: Swift.UInt8
  public var ch14: Swift.UInt8
  public var ch15: Swift.UInt8
  public var ch16: Swift.UInt8
  public func description(value: Swift.UInt8) -> Swift.String
}
public struct JinHaoManuData {
  public var address: Swift.String
  public var hearChip: JinHaoSDK.JinHaoChip
  public var bleChip: JinHaoSDK.JinHaoBLEChip
  public var transEnable: Swift.Bool
}
public struct JinHaoParameters {
}
extension JinHaoSDK.JinHaoProfileType : Swift.Equatable {}
extension JinHaoSDK.JinHaoProfileType : Swift.Hashable {}
extension JinHaoSDK.JinHaoProfileType : Swift.RawRepresentable {}
extension JinHaoSDK.JinHaoChip : Swift.Equatable {}
extension JinHaoSDK.JinHaoChip : Swift.Hashable {}
extension JinHaoSDK.JinHaoChip : Swift.RawRepresentable {}
extension JinHaoSDK.JinHaoBLEChip : Swift.Equatable {}
extension JinHaoSDK.JinHaoBLEChip : Swift.Hashable {}
extension JinHaoSDK.JinHaoBLEChip : Swift.RawRepresentable {}
extension JinHaoSDK.JinHaoDirection : Swift.Equatable {}
extension JinHaoSDK.JinHaoDirection : Swift.Hashable {}
extension JinHaoSDK.JinHaoNoise : Swift.Equatable {}
extension JinHaoSDK.JinHaoNoise : Swift.Hashable {}
extension JinHaoSDK.JinHaoMPO : Swift.Equatable {}
extension JinHaoSDK.JinHaoMPO : Swift.Hashable {}
extension JinHaoSDK.PL3Error : Swift.Equatable {}
extension JinHaoSDK.PL3Error : Swift.Hashable {}
extension JinHaoSDK.JinHaoResultError : Swift.Equatable {}
extension JinHaoSDK.JinHaoResultError : Swift.Hashable {}
extension JinHaoSDK.AccessoryState : Swift.Equatable {}
extension JinHaoSDK.AccessoryState : Swift.Hashable {}
extension JinHaoSDK.AccessoryState : Swift.RawRepresentable {}
extension JinHaoSDK.AccessoryOrientation : Swift.Equatable {}
extension JinHaoSDK.AccessoryOrientation : Swift.Hashable {}
extension JinHaoSDK.AccessoryOrientation : Swift.RawRepresentable {}
extension JinHaoSDK.PL3Command : Swift.Equatable {}
extension JinHaoSDK.PL3Command : Swift.Hashable {}
extension JinHaoSDK.PL3Command : Swift.RawRepresentable {}
extension JinHaoSDK.PL3DeviceSettings : Swift.Equatable {}
extension JinHaoSDK.PL3DeviceSettings : Swift.Hashable {}
extension JinHaoSDK.PL3DeviceSettings : Swift.RawRepresentable {}
